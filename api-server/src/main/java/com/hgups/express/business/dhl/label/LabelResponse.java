package com.hgups.express.business.dhl.label;

import java.util.List;

public class LabelResponse {

    /**
     * meta : {"code":200,"timestamp":"2020-11-10T10:18:25-05:00"}
     * data : {"shipments":[{"status":{"code":"SUCCESS","numRejected":0,"numAccepted":1,"timestamp":"2020-11-10T10:18:27-0500"},"distributionCenter":"USSFO1","packages":[{"packageDetails":{"packageId":123456789,"length":"","width":"","taxCharges":0,"freightCharges":0,"billingRef1":"test bill ref1","service":"","billingRef2":"test bill ref2","weight":2,"declaredValue":0,"currency":"USD","weightUom":"LB","dgCategory":"","mailtype":7,"codAmount":0,"height":"","dimensionUom":"","deliveryConfirmationNo":"","insuredValue":0,"serviceEndorsement":"","packageRefName":"","dutiesPaid":"","orderedProduct":83,"dutyCharges":0,"packageDesc":""},"returnAddress":{"postalCode":12345,"city":"New York","country":"US","phone":"","companyName":"OneZeroBeat","state":"NY","address1":"Address 1","address3":"","address2":"","name":""},"responseDetails":{"labelAttributes":{"construct":"C07","stc":612,"dgCategory":"","serviceLevel":"GRD","carrierRoute":"","outboundSortCode":78,"sortingSetupVersion":7,"inboundSortCode":"m82","productShortCode":"","serviceEndorsement":"","intendedReceivingFacility":"BOS","orderedProduct":83,"mailBanner":"PARCEL SELECT"},"labelDetails":[{"packageId":123456789,"format":"png","labelData":"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","url":"https://webreport.dhlecs.com/label/2020/11/10/label-123456789-FB5E2D80-ED85-8ED4-F0D5B4FDADF3C955.png"}],"distributionCenter":"BOS","customsDetailsProvided":"N","trackingNumber":"420123459361269903505767872667","mailItemId":4021011060501030},"consigneeAddress":{"postalCode":12345,"idType":"","phone":"","state":"NY","email":"","idNumber":"","name":"","city":"New York","country":"","companyName":"OneZeroBeat","address1":"Flushing Queen","address3":"","address2":""}}],"pickup":5352172}]}
     */

    private MetaBean meta;
    private DataBean data;

    public MetaBean getMeta() {
        return meta;
    }

    public void setMeta(MetaBean meta) {
        this.meta = meta;
    }

    public DataBean getData() {
        return data;
    }

    public void setData(DataBean data) {
        this.data = data;
    }

    public static class MetaBean {
        /**
         * code : 200
         * timestamp : 2020-11-10T10:18:25-05:00
         */

        private int code;
        private String timestamp;

        @Override
        public String toString() {
            return "MetaBean{" +
                    "code=" + code +
                    ", timestamp='" + timestamp + '\'' +
                    '}';
        }

        public int getCode() {
            return code;
        }

        public void setCode(int code) {
            this.code = code;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }
    }

    public static class DataBean {
        private List<ShipmentsBean> shipments;

        @Override
        public String toString() {
            return "DataBean{" +
                    "shipments=" + shipments +
                    '}';
        }

        public List<ShipmentsBean> getShipments() {
            return shipments;
        }

        public void setShipments(List<ShipmentsBean> shipments) {
            this.shipments = shipments;
        }

        public static class ShipmentsBean {
            /**
             * status : {"code":"SUCCESS","numRejected":0,"numAccepted":1,"timestamp":"2020-11-10T10:18:27-0500"}
             * distributionCenter : USSFO1
             * packages : [{"packageDetails":{"packageId":123456789,"length":"","width":"","taxCharges":0,"freightCharges":0,"billingRef1":"test bill ref1","service":"","billingRef2":"test bill ref2","weight":2,"declaredValue":0,"currency":"USD","weightUom":"LB","dgCategory":"","mailtype":7,"codAmount":0,"height":"","dimensionUom":"","deliveryConfirmationNo":"","insuredValue":0,"serviceEndorsement":"","packageRefName":"","dutiesPaid":"","orderedProduct":83,"dutyCharges":0,"packageDesc":""},"returnAddress":{"postalCode":12345,"city":"New York","country":"US","phone":"","companyName":"OneZeroBeat","state":"NY","address1":"Address 1","address3":"","address2":"","name":""},"responseDetails":{"labelAttributes":{"construct":"C07","stc":612,"dgCategory":"","serviceLevel":"GRD","carrierRoute":"","outboundSortCode":78,"sortingSetupVersion":7,"inboundSortCode":"m82","productShortCode":"","serviceEndorsement":"","intendedReceivingFacility":"BOS","orderedProduct":83,"mailBanner":"PARCEL SELECT"},"labelDetails":[{"packageId":123456789,"format":"png","labelData":"","url":"https://webreport.dhlecs.com/label/2020/11/10/label-123456789-FB5E2D80-ED85-8ED4-F0D5B4FDADF3C955.png"}],"distributionCenter":"BOS","customsDetailsProvided":"N","trackingNumber":"420123459361269903505767872667","mailItemId":4021011060501030},"consigneeAddress":{"postalCode":12345,"idType":"","phone":"","state":"NY","email":"","idNumber":"","name":"","city":"New York","country":"","companyName":"OneZeroBeat","address1":"Flushing Queen","address3":"","address2":""}}]
             * pickup : 5352172
             */

            private StatusBean status;
            private String distributionCenter;
            private int pickup;
            private List<PackagesBean> packages;

            @Override
            public String toString() {
                return "ShipmentsBean{" +
                        "status=" + status +
                        ", distributionCenter='" + distributionCenter + '\'' +
                        ", pickup=" + pickup +
                        ", packages=" + packages +
                        '}';
            }

            public StatusBean getStatus() {
                return status;
            }

            public void setStatus(StatusBean status) {
                this.status = status;
            }

            public String getDistributionCenter() {
                return distributionCenter;
            }

            public void setDistributionCenter(String distributionCenter) {
                this.distributionCenter = distributionCenter;
            }

            public int getPickup() {
                return pickup;
            }

            public void setPickup(int pickup) {
                this.pickup = pickup;
            }

            public List<PackagesBean> getPackages() {
                return packages;
            }

            public void setPackages(List<PackagesBean> packages) {
                this.packages = packages;
            }

            public static class StatusBean {
                /**
                 * code : SUCCESS
                 * numRejected : 0.0
                 * numAccepted : 1.0
                 * timestamp : 2020-11-10T10:18:27-0500
                 */

                private String code;
                private double numRejected;
                private double numAccepted;
                private String timestamp;

                @Override
                public String toString() {
                    return "StatusBean{" +
                            "code='" + code + '\'' +
                            ", numRejected=" + numRejected +
                            ", numAccepted=" + numAccepted +
                            ", timestamp='" + timestamp + '\'' +
                            '}';
                }

                public String getCode() {
                    return code;
                }

                public void setCode(String code) {
                    this.code = code;
                }

                public double getNumRejected() {
                    return numRejected;
                }

                public void setNumRejected(double numRejected) {
                    this.numRejected = numRejected;
                }

                public double getNumAccepted() {
                    return numAccepted;
                }

                public void setNumAccepted(double numAccepted) {
                    this.numAccepted = numAccepted;
                }

                public String getTimestamp() {
                    return timestamp;
                }

                public void setTimestamp(String timestamp) {
                    this.timestamp = timestamp;
                }
            }

            public static class PackagesBean {
                /**
                 * packageDetails : {"packageId":123456789,"length":"","width":"","taxCharges":0,"freightCharges":0,"billingRef1":"test bill ref1","service":"","billingRef2":"test bill ref2","weight":2,"declaredValue":0,"currency":"USD","weightUom":"LB","dgCategory":"","mailtype":7,"codAmount":0,"height":"","dimensionUom":"","deliveryConfirmationNo":"","insuredValue":0,"serviceEndorsement":"","packageRefName":"","dutiesPaid":"","orderedProduct":83,"dutyCharges":0,"packageDesc":""}
                 * returnAddress : {"postalCode":12345,"city":"New York","country":"US","phone":"","companyName":"OneZeroBeat","state":"NY","address1":"Address 1","address3":"","address2":"","name":""}
                 * responseDetails : {"labelAttributes":{"construct":"C07","stc":612,"dgCategory":"","serviceLevel":"GRD","carrierRoute":"","outboundSortCode":78,"sortingSetupVersion":7,"inboundSortCode":"m82","productShortCode":"","serviceEndorsement":"","intendedReceivingFacility":"BOS","orderedProduct":83,"mailBanner":"PARCEL SELECT"},"labelDetails":[{"packageId":123456789,"format":"png","labelData":"","url":"https://webreport.dhlecs.com/label/2020/11/10/label-123456789-FB5E2D80-ED85-8ED4-F0D5B4FDADF3C955.png"}],"distributionCenter":"BOS","customsDetailsProvided":"N","trackingNumber":"420123459361269903505767872667","mailItemId":4021011060501030}
                 * consigneeAddress : {"postalCode":12345,"idType":"","phone":"","state":"NY","email":"","idNumber":"","name":"","city":"New York","country":"","companyName":"OneZeroBeat","address1":"Flushing Queen","address3":"","address2":""}
                 */

                private PackageDetailsBean packageDetails;
                private ReturnAddressBean returnAddress;
                private ResponseDetailsBean responseDetails;
                private ConsigneeAddressBean consigneeAddress;

                public PackageDetailsBean getPackageDetails() {
                    return packageDetails;
                }

                @Override
                public String toString() {
                    return "PackagesBean{" +
                            "packageDetails=" + packageDetails +
                            ", returnAddress=" + returnAddress +
                            ", responseDetails=" + responseDetails +
                            ", consigneeAddress=" + consigneeAddress +
                            '}';
                }

                public void setPackageDetails(PackageDetailsBean packageDetails) {
                    this.packageDetails = packageDetails;
                }

                public ReturnAddressBean getReturnAddress() {
                    return returnAddress;
                }

                public void setReturnAddress(ReturnAddressBean returnAddress) {
                    this.returnAddress = returnAddress;
                }

                public ResponseDetailsBean getResponseDetails() {
                    return responseDetails;
                }

                public void setResponseDetails(ResponseDetailsBean responseDetails) {
                    this.responseDetails = responseDetails;
                }

                public ConsigneeAddressBean getConsigneeAddress() {
                    return consigneeAddress;
                }

                public void setConsigneeAddress(ConsigneeAddressBean consigneeAddress) {
                    this.consigneeAddress = consigneeAddress;
                }

                public static class PackageDetailsBean {
                    /**
                     * packageId : 123456789
                     * length :
                     * width :
                     * taxCharges : 0.0
                     * freightCharges : 0.0
                     * billingRef1 : test bill ref1
                     * service :
                     * billingRef2 : test bill ref2
                     * weight : 2
                     * declaredValue : 0.0
                     * currency : USD
                     * weightUom : LB
                     * dgCategory :
                     * mailtype : 7
                     * codAmount : 0
                     * height :
                     * dimensionUom :
                     * deliveryConfirmationNo :
                     * insuredValue : 0
                     * serviceEndorsement :
                     * packageRefName :
                     * dutiesPaid :
                     * orderedProduct : 83
                     * dutyCharges : 0.0
                     * packageDesc :
                     */

                    private String packageId;
                    private String length;
                    private String width;
                    private double taxCharges;
                    private double freightCharges;
                    private String billingRef1;
                    private String service;
                    private String billingRef2;
                    private int weight;
                    private double declaredValue;
                    private String currency;
                    private String weightUom;
                    private String dgCategory;
                    private int mailtype;
                    private int codAmount;
                    private String height;
                    private String dimensionUom;
                    private String deliveryConfirmationNo;
                    private int insuredValue;
                    private String serviceEndorsement;
                    private String packageRefName;
                    private String dutiesPaid;
                    private int orderedProduct;
                    private double dutyCharges;
                    private String packageDesc;

                    @Override
                    public String toString() {
                        return "PackageDetailsBean{" +
                                "packageId=" + packageId +
                                ", length='" + length + '\'' +
                                ", width='" + width + '\'' +
                                ", taxCharges=" + taxCharges +
                                ", freightCharges=" + freightCharges +
                                ", billingRef1='" + billingRef1 + '\'' +
                                ", service='" + service + '\'' +
                                ", billingRef2='" + billingRef2 + '\'' +
                                ", weight=" + weight +
                                ", declaredValue=" + declaredValue +
                                ", currency='" + currency + '\'' +
                                ", weightUom='" + weightUom + '\'' +
                                ", dgCategory='" + dgCategory + '\'' +
                                ", mailtype=" + mailtype +
                                ", codAmount=" + codAmount +
                                ", height='" + height + '\'' +
                                ", dimensionUom='" + dimensionUom + '\'' +
                                ", deliveryConfirmationNo='" + deliveryConfirmationNo + '\'' +
                                ", insuredValue=" + insuredValue +
                                ", serviceEndorsement='" + serviceEndorsement + '\'' +
                                ", packageRefName='" + packageRefName + '\'' +
                                ", dutiesPaid='" + dutiesPaid + '\'' +
                                ", orderedProduct=" + orderedProduct +
                                ", dutyCharges=" + dutyCharges +
                                ", packageDesc='" + packageDesc + '\'' +
                                '}';
                    }

                    public String getPackageId() {
                        return packageId;
                    }

                    public void setPackageId(String packageId) {
                        this.packageId = packageId;
                    }

                    public String getLength() {
                        return length;
                    }

                    public void setLength(String length) {
                        this.length = length;
                    }

                    public String getWidth() {
                        return width;
                    }

                    public void setWidth(String width) {
                        this.width = width;
                    }

                    public double getTaxCharges() {
                        return taxCharges;
                    }

                    public void setTaxCharges(double taxCharges) {
                        this.taxCharges = taxCharges;
                    }

                    public double getFreightCharges() {
                        return freightCharges;
                    }

                    public void setFreightCharges(double freightCharges) {
                        this.freightCharges = freightCharges;
                    }

                    public String getBillingRef1() {
                        return billingRef1;
                    }

                    public void setBillingRef1(String billingRef1) {
                        this.billingRef1 = billingRef1;
                    }

                    public String getService() {
                        return service;
                    }

                    public void setService(String service) {
                        this.service = service;
                    }

                    public String getBillingRef2() {
                        return billingRef2;
                    }

                    public void setBillingRef2(String billingRef2) {
                        this.billingRef2 = billingRef2;
                    }

                    public int getWeight() {
                        return weight;
                    }

                    public void setWeight(int weight) {
                        this.weight = weight;
                    }

                    public double getDeclaredValue() {
                        return declaredValue;
                    }

                    public void setDeclaredValue(double declaredValue) {
                        this.declaredValue = declaredValue;
                    }

                    public String getCurrency() {
                        return currency;
                    }

                    public void setCurrency(String currency) {
                        this.currency = currency;
                    }

                    public String getWeightUom() {
                        return weightUom;
                    }

                    public void setWeightUom(String weightUom) {
                        this.weightUom = weightUom;
                    }

                    public String getDgCategory() {
                        return dgCategory;
                    }

                    public void setDgCategory(String dgCategory) {
                        this.dgCategory = dgCategory;
                    }

                    public int getMailtype() {
                        return mailtype;
                    }

                    public void setMailtype(int mailtype) {
                        this.mailtype = mailtype;
                    }

                    public int getCodAmount() {
                        return codAmount;
                    }

                    public void setCodAmount(int codAmount) {
                        this.codAmount = codAmount;
                    }

                    public String getHeight() {
                        return height;
                    }

                    public void setHeight(String height) {
                        this.height = height;
                    }

                    public String getDimensionUom() {
                        return dimensionUom;
                    }

                    public void setDimensionUom(String dimensionUom) {
                        this.dimensionUom = dimensionUom;
                    }

                    public String getDeliveryConfirmationNo() {
                        return deliveryConfirmationNo;
                    }

                    public void setDeliveryConfirmationNo(String deliveryConfirmationNo) {
                        this.deliveryConfirmationNo = deliveryConfirmationNo;
                    }

                    public int getInsuredValue() {
                        return insuredValue;
                    }

                    public void setInsuredValue(int insuredValue) {
                        this.insuredValue = insuredValue;
                    }

                    public String getServiceEndorsement() {
                        return serviceEndorsement;
                    }

                    public void setServiceEndorsement(String serviceEndorsement) {
                        this.serviceEndorsement = serviceEndorsement;
                    }

                    public String getPackageRefName() {
                        return packageRefName;
                    }

                    public void setPackageRefName(String packageRefName) {
                        this.packageRefName = packageRefName;
                    }

                    public String getDutiesPaid() {
                        return dutiesPaid;
                    }

                    public void setDutiesPaid(String dutiesPaid) {
                        this.dutiesPaid = dutiesPaid;
                    }

                    public int getOrderedProduct() {
                        return orderedProduct;
                    }

                    public void setOrderedProduct(int orderedProduct) {
                        this.orderedProduct = orderedProduct;
                    }

                    public double getDutyCharges() {
                        return dutyCharges;
                    }

                    public void setDutyCharges(double dutyCharges) {
                        this.dutyCharges = dutyCharges;
                    }

                    public String getPackageDesc() {
                        return packageDesc;
                    }

                    public void setPackageDesc(String packageDesc) {
                        this.packageDesc = packageDesc;
                    }
                }

                public static class ReturnAddressBean {
                    /**
                     * postalCode : 12345
                     * city : New York
                     * country : US
                     * phone :
                     * companyName : OneZeroBeat
                     * state : NY
                     * address1 : Address 1
                     * address3 :
                     * address2 :
                     * name :
                     */

                    private int postalCode;
                    private String city;
                    private String country;
                    private String phone;
                    private String companyName;
                    private String state;
                    private String address1;
                    private String address3;
                    private String address2;
                    private String name;

                    @Override
                    public String toString() {
                        return "ReturnAddressBean{" +
                                "postalCode=" + postalCode +
                                ", city='" + city + '\'' +
                                ", country='" + country + '\'' +
                                ", phone='" + phone + '\'' +
                                ", companyName='" + companyName + '\'' +
                                ", state='" + state + '\'' +
                                ", address1='" + address1 + '\'' +
                                ", address3='" + address3 + '\'' +
                                ", address2='" + address2 + '\'' +
                                ", name='" + name + '\'' +
                                '}';
                    }

                    public int getPostalCode() {
                        return postalCode;
                    }

                    public void setPostalCode(int postalCode) {
                        this.postalCode = postalCode;
                    }

                    public String getCity() {
                        return city;
                    }

                    public void setCity(String city) {
                        this.city = city;
                    }

                    public String getCountry() {
                        return country;
                    }

                    public void setCountry(String country) {
                        this.country = country;
                    }

                    public String getPhone() {
                        return phone;
                    }

                    public void setPhone(String phone) {
                        this.phone = phone;
                    }

                    public String getCompanyName() {
                        return companyName;
                    }

                    public void setCompanyName(String companyName) {
                        this.companyName = companyName;
                    }

                    public String getState() {
                        return state;
                    }

                    public void setState(String state) {
                        this.state = state;
                    }

                    public String getAddress1() {
                        return address1;
                    }

                    public void setAddress1(String address1) {
                        this.address1 = address1;
                    }

                    public String getAddress3() {
                        return address3;
                    }

                    public void setAddress3(String address3) {
                        this.address3 = address3;
                    }

                    public String getAddress2() {
                        return address2;
                    }

                    public void setAddress2(String address2) {
                        this.address2 = address2;
                    }

                    public String getName() {
                        return name;
                    }

                    public void setName(String name) {
                        this.name = name;
                    }
                }

                public static class ResponseDetailsBean {
                    /**
                     * labelAttributes : {"construct":"C07","stc":612,"dgCategory":"","serviceLevel":"GRD","carrierRoute":"","outboundSortCode":78,"sortingSetupVersion":7,"inboundSortCode":"m82","productShortCode":"","serviceEndorsement":"","intendedReceivingFacility":"BOS","orderedProduct":83,"mailBanner":"PARCEL SELECT"}
                     * labelDetails : [{"packageId":123456789,"format":"png","labelData":"","url":"https://webreport.dhlecs.com/label/2020/11/10/label-123456789-FB5E2D80-ED85-8ED4-F0D5B4FDADF3C955.png"}]
                     * distributionCenter : BOS
                     * customsDetailsProvided : N
                     * trackingNumber : 420123459361269903505767872667
                     * mailItemId : 4021011060501030
                     */

                    private LabelAttributesBean labelAttributes;
                    private String distributionCenter;
                    private String customsDetailsProvided;
                    private String trackingNumber;
                    private long mailItemId;
                    private List<LabelDetailsBean> labelDetails;

                    public LabelAttributesBean getLabelAttributes() {
                        return labelAttributes;
                    }

                    @Override
                    public String toString() {
                        return "ResponseDetailsBean{" +
                                "labelAttributes=" + labelAttributes +
                                ", distributionCenter='" + distributionCenter + '\'' +
                                ", customsDetailsProvided='" + customsDetailsProvided + '\'' +
                                ", trackingNumber='" + trackingNumber + '\'' +
                                ", mailItemId=" + mailItemId +
                                ", labelDetails=" + labelDetails +
                                '}';
                    }

                    public void setLabelAttributes(LabelAttributesBean labelAttributes) {
                        this.labelAttributes = labelAttributes;
                    }

                    public String getDistributionCenter() {
                        return distributionCenter;
                    }

                    public void setDistributionCenter(String distributionCenter) {
                        this.distributionCenter = distributionCenter;
                    }

                    public String getCustomsDetailsProvided() {
                        return customsDetailsProvided;
                    }

                    public void setCustomsDetailsProvided(String customsDetailsProvided) {
                        this.customsDetailsProvided = customsDetailsProvided;
                    }

                    public String getTrackingNumber() {
                        return trackingNumber;
                    }

                    public void setTrackingNumber(String trackingNumber) {
                        this.trackingNumber = trackingNumber;
                    }

                    public long getMailItemId() {
                        return mailItemId;
                    }

                    public void setMailItemId(long mailItemId) {
                        this.mailItemId = mailItemId;
                    }

                    public List<LabelDetailsBean> getLabelDetails() {
                        return labelDetails;
                    }

                    public void setLabelDetails(List<LabelDetailsBean> labelDetails) {
                        this.labelDetails = labelDetails;
                    }

                    public static class LabelAttributesBean {
                        /**
                         * construct : C07
                         * stc : 612
                         * dgCategory :
                         * serviceLevel : GRD
                         * carrierRoute :
                         * outboundSortCode : 78
                         * sortingSetupVersion : 7
                         * inboundSortCode : m82
                         * productShortCode :
                         * serviceEndorsement :
                         * intendedReceivingFacility : BOS
                         * orderedProduct : 83
                         * mailBanner : PARCEL SELECT
                         */

                        private String construct;
                        private int stc;
                        private String dgCategory;
                        private String serviceLevel;
                        private String carrierRoute;
                        private String outboundSortCode;
                        private int sortingSetupVersion;
                        private String inboundSortCode;
                        private String productShortCode;
                        private String serviceEndorsement;
                        private String intendedReceivingFacility;
                        private int orderedProduct;
                        private String mailBanner;

                        @Override
                        public String toString() {
                            return "LabelAttributesBean{" +
                                    "construct='" + construct + '\'' +
                                    ", stc=" + stc +
                                    ", dgCategory='" + dgCategory + '\'' +
                                    ", serviceLevel='" + serviceLevel + '\'' +
                                    ", carrierRoute='" + carrierRoute + '\'' +
                                    ", outboundSortCode=" + outboundSortCode +
                                    ", sortingSetupVersion=" + sortingSetupVersion +
                                    ", inboundSortCode='" + inboundSortCode + '\'' +
                                    ", productShortCode='" + productShortCode + '\'' +
                                    ", serviceEndorsement='" + serviceEndorsement + '\'' +
                                    ", intendedReceivingFacility='" + intendedReceivingFacility + '\'' +
                                    ", orderedProduct=" + orderedProduct +
                                    ", mailBanner='" + mailBanner + '\'' +
                                    '}';
                        }

                        public String getConstruct() {
                            return construct;
                        }

                        public void setConstruct(String construct) {
                            this.construct = construct;
                        }

                        public int getStc() {
                            return stc;
                        }

                        public void setStc(int stc) {
                            this.stc = stc;
                        }

                        public String getDgCategory() {
                            return dgCategory;
                        }

                        public void setDgCategory(String dgCategory) {
                            this.dgCategory = dgCategory;
                        }

                        public String getServiceLevel() {
                            return serviceLevel;
                        }

                        public void setServiceLevel(String serviceLevel) {
                            this.serviceLevel = serviceLevel;
                        }

                        public String getCarrierRoute() {
                            return carrierRoute;
                        }

                        public void setCarrierRoute(String carrierRoute) {
                            this.carrierRoute = carrierRoute;
                        }

                        public String getOutboundSortCode() {
                            return outboundSortCode;
                        }

                        public void setOutboundSortCode(String outboundSortCode) {
                            this.outboundSortCode = outboundSortCode;
                        }

                        public int getSortingSetupVersion() {
                            return sortingSetupVersion;
                        }

                        public void setSortingSetupVersion(int sortingSetupVersion) {
                            this.sortingSetupVersion = sortingSetupVersion;
                        }

                        public String getInboundSortCode() {
                            return inboundSortCode;
                        }

                        public void setInboundSortCode(String inboundSortCode) {
                            this.inboundSortCode = inboundSortCode;
                        }

                        public String getProductShortCode() {
                            return productShortCode;
                        }

                        public void setProductShortCode(String productShortCode) {
                            this.productShortCode = productShortCode;
                        }

                        public String getServiceEndorsement() {
                            return serviceEndorsement;
                        }

                        public void setServiceEndorsement(String serviceEndorsement) {
                            this.serviceEndorsement = serviceEndorsement;
                        }

                        public String getIntendedReceivingFacility() {
                            return intendedReceivingFacility;
                        }

                        public void setIntendedReceivingFacility(String intendedReceivingFacility) {
                            this.intendedReceivingFacility = intendedReceivingFacility;
                        }

                        public int getOrderedProduct() {
                            return orderedProduct;
                        }

                        public void setOrderedProduct(int orderedProduct) {
                            this.orderedProduct = orderedProduct;
                        }

                        public String getMailBanner() {
                            return mailBanner;
                        }

                        public void setMailBanner(String mailBanner) {
                            this.mailBanner = mailBanner;
                        }
                    }

                    public static class LabelDetailsBean {
                        /**
                         * packageId : 123456789
                         * format : png
                         * labelData : 
                         * url : https://webreport.dhlecs.com/label/2020/11/10/label-123456789-FB5E2D80-ED85-8ED4-F0D5B4FDADF3C955.png
                         */

                        private String packageId;
                        private String format;
                        private String labelData;
                        private String url;

                        @Override
                        public String toString() {
                            return "LabelDetailsBean{" +
                                    "packageId=" + packageId +
                                    ", format='" + format + '\'' +
                                    ", labelData='" + labelData + '\'' +
                                    ", url='" + url + '\'' +
                                    '}';
                        }

                        public String getPackageId() {
                            return packageId;
                        }

                        public void setPackageId(String packageId) {
                            this.packageId = packageId;
                        }

                        public String getFormat() {
                            return format;
                        }

                        public void setFormat(String format) {
                            this.format = format;
                        }

                        public String getLabelData() {
                            return labelData;
                        }

                        public void setLabelData(String labelData) {
                            this.labelData = labelData;
                        }

                        public String getUrl() {
                            return url;
                        }

                        public void setUrl(String url) {
                            this.url = url;
                        }
                    }
                }

                public static class ConsigneeAddressBean {
                    /**
                     * postalCode : 12345
                     * idType :
                     * phone :
                     * state : NY
                     * email :
                     * idNumber :
                     * name :
                     * city : New York
                     * country :
                     * companyName : OneZeroBeat
                     * address1 : Flushing Queen
                     * address3 :
                     * address2 :
                     */

                    private int postalCode;
                    private String idType;
                    private String phone;
                    private String state;
                    private String email;
                    private String idNumber;
                    private String name;
                    private String city;
                    private String country;
                    private String companyName;
                    private String address1;
                    private String address3;
                    private String address2;

                    @Override
                    public String toString() {
                        return "ConsigneeAddressBean{" +
                                "postalCode=" + postalCode +
                                ", idType='" + idType + '\'' +
                                ", phone='" + phone + '\'' +
                                ", state='" + state + '\'' +
                                ", email='" + email + '\'' +
                                ", idNumber='" + idNumber + '\'' +
                                ", name='" + name + '\'' +
                                ", city='" + city + '\'' +
                                ", country='" + country + '\'' +
                                ", companyName='" + companyName + '\'' +
                                ", address1='" + address1 + '\'' +
                                ", address3='" + address3 + '\'' +
                                ", address2='" + address2 + '\'' +
                                '}';
                    }

                    public int getPostalCode() {
                        return postalCode;
                    }

                    public void setPostalCode(int postalCode) {
                        this.postalCode = postalCode;
                    }

                    public String getIdType() {
                        return idType;
                    }

                    public void setIdType(String idType) {
                        this.idType = idType;
                    }

                    public String getPhone() {
                        return phone;
                    }

                    public void setPhone(String phone) {
                        this.phone = phone;
                    }

                    public String getState() {
                        return state;
                    }

                    public void setState(String state) {
                        this.state = state;
                    }

                    public String getEmail() {
                        return email;
                    }

                    public void setEmail(String email) {
                        this.email = email;
                    }

                    public String getIdNumber() {
                        return idNumber;
                    }

                    public void setIdNumber(String idNumber) {
                        this.idNumber = idNumber;
                    }

                    public String getName() {
                        return name;
                    }

                    public void setName(String name) {
                        this.name = name;
                    }

                    public String getCity() {
                        return city;
                    }

                    public void setCity(String city) {
                        this.city = city;
                    }

                    public String getCountry() {
                        return country;
                    }

                    public void setCountry(String country) {
                        this.country = country;
                    }

                    public String getCompanyName() {
                        return companyName;
                    }

                    public void setCompanyName(String companyName) {
                        this.companyName = companyName;
                    }

                    public String getAddress1() {
                        return address1;
                    }

                    public void setAddress1(String address1) {
                        this.address1 = address1;
                    }

                    public String getAddress3() {
                        return address3;
                    }

                    public void setAddress3(String address3) {
                        this.address3 = address3;
                    }

                    public String getAddress2() {
                        return address2;
                    }

                    public void setAddress2(String address2) {
                        this.address2 = address2;
                    }
                }
            }
        }
    }

    @Override
    public String toString() {
        return "LabelResponse{" +
                "meta=" + meta +
                ", data=" + data +
                '}';
    }
}
